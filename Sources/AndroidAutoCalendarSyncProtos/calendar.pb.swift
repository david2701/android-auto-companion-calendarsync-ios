// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: third_party/java_src/android_libs/connecteddevice/java/com/google/android/connecteddevice/calendarsync/proto/calendar.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Aae_Calendarsync_Calendar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String = String()

  public var uuid: String = String()

  public var color: Aae_Calendarsync_Color {
    get {return _color ?? Aae_Calendarsync_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {self._color = nil}

  public var event: [Aae_Calendarsync_Event] = []

  public var accountName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _color: Aae_Calendarsync_Color? = nil
}

public struct Aae_Calendarsync_Calendars {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var calendar: [Aae_Calendarsync_Calendar] = []

  public var deviceTimeZone: Aae_Calendarsync_TimeZone {
    get {return _deviceTimeZone ?? Aae_Calendarsync_TimeZone()}
    set {_deviceTimeZone = newValue}
  }
  /// Returns true if `deviceTimeZone` has been explicitly set.
  public var hasDeviceTimeZone: Bool {return self._deviceTimeZone != nil}
  /// Clears the value of `deviceTimeZone`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceTimeZone() {self._deviceTimeZone = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _deviceTimeZone: Aae_Calendarsync_TimeZone? = nil
}

public struct Aae_Calendarsync_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var externalIdentifier: String {
    get {return _storage._externalIdentifier}
    set {_uniqueStorage()._externalIdentifier = newValue}
  }

  public var startDate: Aae_Calendarsync_Timestamp {
    get {return _storage._startDate ?? Aae_Calendarsync_Timestamp()}
    set {_uniqueStorage()._startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return _storage._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {_uniqueStorage()._startDate = nil}

  public var endDate: Aae_Calendarsync_Timestamp {
    get {return _storage._endDate ?? Aae_Calendarsync_Timestamp()}
    set {_uniqueStorage()._endDate = newValue}
  }
  /// Returns true if `endDate` has been explicitly set.
  public var hasEndDate: Bool {return _storage._endDate != nil}
  /// Clears the value of `endDate`. Subsequent reads from it will return its default value.
  public mutating func clearEndDate() {_uniqueStorage()._endDate = nil}

  public var timeZone: Aae_Calendarsync_TimeZone {
    get {return _storage._timeZone ?? Aae_Calendarsync_TimeZone()}
    set {_uniqueStorage()._timeZone = newValue}
  }
  /// Returns true if `timeZone` has been explicitly set.
  public var hasTimeZone: Bool {return _storage._timeZone != nil}
  /// Clears the value of `timeZone`. Subsequent reads from it will return its default value.
  public mutating func clearTimeZone() {_uniqueStorage()._timeZone = nil}

  public var endTimeZone: Aae_Calendarsync_TimeZone {
    get {return _storage._endTimeZone ?? Aae_Calendarsync_TimeZone()}
    set {_uniqueStorage()._endTimeZone = newValue}
  }
  /// Returns true if `endTimeZone` has been explicitly set.
  public var hasEndTimeZone: Bool {return _storage._endTimeZone != nil}
  /// Clears the value of `endTimeZone`. Subsequent reads from it will return its default value.
  public mutating func clearEndTimeZone() {_uniqueStorage()._endTimeZone = nil}

  public var isAllDay: Bool {
    get {return _storage._isAllDay}
    set {_uniqueStorage()._isAllDay = newValue}
  }

  public var location: String {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var color: Aae_Calendarsync_Color {
    get {return _storage._color ?? Aae_Calendarsync_Color()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {_uniqueStorage()._color = nil}

  public var status: Aae_Calendarsync_Event.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var organizer: String {
    get {return _storage._organizer}
    set {_uniqueStorage()._organizer = newValue}
  }

  public var attendee: [Aae_Calendarsync_Attendee] {
    get {return _storage._attendee}
    set {_uniqueStorage()._attendee = newValue}
  }

  public var creationDate: Aae_Calendarsync_Timestamp {
    get {return _storage._creationDate ?? Aae_Calendarsync_Timestamp()}
    set {_uniqueStorage()._creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  public var hasCreationDate: Bool {return _storage._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  public mutating func clearCreationDate() {_uniqueStorage()._creationDate = nil}

  public var lastModifiedDate: Aae_Calendarsync_Timestamp {
    get {return _storage._lastModifiedDate ?? Aae_Calendarsync_Timestamp()}
    set {_uniqueStorage()._lastModifiedDate = newValue}
  }
  /// Returns true if `lastModifiedDate` has been explicitly set.
  public var hasLastModifiedDate: Bool {return _storage._lastModifiedDate != nil}
  /// Clears the value of `lastModifiedDate`. Subsequent reads from it will return its default value.
  public mutating func clearLastModifiedDate() {_uniqueStorage()._lastModifiedDate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecifiedStatus // = 0
    case tentative // = 1
    case confirmed // = 2
    case canceled // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedStatus
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedStatus
      case 1: self = .tentative
      case 2: self = .confirmed
      case 3: self = .canceled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedStatus: return 0
      case .tentative: return 1
      case .confirmed: return 2
      case .canceled: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Aae_Calendarsync_Event.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Aae_Calendarsync_Event.Status] = [
    .unspecifiedStatus,
    .tentative,
    .confirmed,
    .canceled,
  ]
}

#endif  // swift(>=4.2)

public struct Aae_Calendarsync_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var argb: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Aae_Calendarsync_Attendee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var email: String = String()

  public var status: Aae_Calendarsync_Attendee.Status = .unspecifiedStatus

  public var type: Aae_Calendarsync_Attendee.TypeEnum = .unspecifiedType

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecifiedStatus // = 0
    case noneStatus // = 1
    case accepted // = 2
    case declined // = 3
    case invited // = 4
    case tentative // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedStatus
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedStatus
      case 1: self = .noneStatus
      case 2: self = .accepted
      case 3: self = .declined
      case 4: self = .invited
      case 5: self = .tentative
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedStatus: return 0
      case .noneStatus: return 1
      case .accepted: return 2
      case .declined: return 3
      case .invited: return 4
      case .tentative: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecifiedType // = 0
    case noneType // = 1
    case `optional` // = 2
    case `required` // = 3
    case resource // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedType
      case 1: self = .noneType
      case 2: self = .optional
      case 3: self = .required
      case 4: self = .resource
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedType: return 0
      case .noneType: return 1
      case .optional: return 2
      case .required: return 3
      case .resource: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Aae_Calendarsync_Attendee.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Aae_Calendarsync_Attendee.Status] = [
    .unspecifiedStatus,
    .noneStatus,
    .accepted,
    .declined,
    .invited,
    .tentative,
  ]
}

extension Aae_Calendarsync_Attendee.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Aae_Calendarsync_Attendee.TypeEnum] = [
    .unspecifiedType,
    .noneType,
    .optional,
    .required,
    .resource,
  ]
}

#endif  // swift(>=4.2)

public struct Aae_Calendarsync_Timestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seconds: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Aae_Calendarsync_TimeZone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var secondsFromGmt: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "aae.calendarsync"

extension Aae_Calendarsync_Calendar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Calendar"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "uuid"),
    3: .same(proto: "color"),
    4: .same(proto: "event"),
    5: .standard(proto: "account_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.event) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.accountName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.event.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.event, fieldNumber: 4)
    }
    if !self.accountName.isEmpty {
      try visitor.visitSingularStringField(value: self.accountName, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Calendar, rhs: Aae_Calendarsync_Calendar) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs._color != rhs._color {return false}
    if lhs.event != rhs.event {return false}
    if lhs.accountName != rhs.accountName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_Calendars: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Calendars"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "calendar"),
    2: .standard(proto: "device_time_zone"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.calendar) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deviceTimeZone) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.calendar.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calendar, fieldNumber: 1)
    }
    try { if let v = self._deviceTimeZone {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Calendars, rhs: Aae_Calendarsync_Calendars) -> Bool {
    if lhs.calendar != rhs.calendar {return false}
    if lhs._deviceTimeZone != rhs._deviceTimeZone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "external_identifier"),
    3: .standard(proto: "start_date"),
    4: .standard(proto: "end_date"),
    5: .standard(proto: "time_zone"),
    6: .standard(proto: "end_time_zone"),
    7: .standard(proto: "is_all_day"),
    8: .same(proto: "location"),
    9: .same(proto: "description"),
    10: .same(proto: "color"),
    11: .same(proto: "status"),
    12: .same(proto: "organizer"),
    13: .same(proto: "attendee"),
    14: .standard(proto: "creation_date"),
    15: .standard(proto: "last_modified_date"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _externalIdentifier: String = String()
    var _startDate: Aae_Calendarsync_Timestamp? = nil
    var _endDate: Aae_Calendarsync_Timestamp? = nil
    var _timeZone: Aae_Calendarsync_TimeZone? = nil
    var _endTimeZone: Aae_Calendarsync_TimeZone? = nil
    var _isAllDay: Bool = false
    var _location: String = String()
    var _description_p: String = String()
    var _color: Aae_Calendarsync_Color? = nil
    var _status: Aae_Calendarsync_Event.Status = .unspecifiedStatus
    var _organizer: String = String()
    var _attendee: [Aae_Calendarsync_Attendee] = []
    var _creationDate: Aae_Calendarsync_Timestamp? = nil
    var _lastModifiedDate: Aae_Calendarsync_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _externalIdentifier = source._externalIdentifier
      _startDate = source._startDate
      _endDate = source._endDate
      _timeZone = source._timeZone
      _endTimeZone = source._endTimeZone
      _isAllDay = source._isAllDay
      _location = source._location
      _description_p = source._description_p
      _color = source._color
      _status = source._status
      _organizer = source._organizer
      _attendee = source._attendee
      _creationDate = source._creationDate
      _lastModifiedDate = source._lastModifiedDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._externalIdentifier) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._startDate) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._endDate) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._timeZone) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._endTimeZone) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._isAllDay) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._location) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._color) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._organizer) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._attendee) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._creationDate) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._lastModifiedDate) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._externalIdentifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalIdentifier, fieldNumber: 2)
      }
      try { if let v = _storage._startDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._endDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._timeZone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._endTimeZone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._isAllDay != false {
        try visitor.visitSingularBoolField(value: _storage._isAllDay, fieldNumber: 7)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 8)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 9)
      }
      try { if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._status != .unspecifiedStatus {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 11)
      }
      if !_storage._organizer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._organizer, fieldNumber: 12)
      }
      if !_storage._attendee.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attendee, fieldNumber: 13)
      }
      try { if let v = _storage._creationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._lastModifiedDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Event, rhs: Aae_Calendarsync_Event) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._externalIdentifier != rhs_storage._externalIdentifier {return false}
        if _storage._startDate != rhs_storage._startDate {return false}
        if _storage._endDate != rhs_storage._endDate {return false}
        if _storage._timeZone != rhs_storage._timeZone {return false}
        if _storage._endTimeZone != rhs_storage._endTimeZone {return false}
        if _storage._isAllDay != rhs_storage._isAllDay {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._organizer != rhs_storage._organizer {return false}
        if _storage._attendee != rhs_storage._attendee {return false}
        if _storage._creationDate != rhs_storage._creationDate {return false}
        if _storage._lastModifiedDate != rhs_storage._lastModifiedDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_Event.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_STATUS"),
    1: .same(proto: "TENTATIVE"),
    2: .same(proto: "CONFIRMED"),
    3: .same(proto: "CANCELED"),
  ]
}

extension Aae_Calendarsync_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "argb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.argb) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.argb != 0 {
      try visitor.visitSingularInt32Field(value: self.argb, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Color, rhs: Aae_Calendarsync_Color) -> Bool {
    if lhs.argb != rhs.argb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_Attendee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Attendee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "email"),
    3: .same(proto: "status"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if self.status != .unspecifiedStatus {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    if self.type != .unspecifiedType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Attendee, rhs: Aae_Calendarsync_Attendee) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.status != rhs.status {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_Attendee.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_STATUS"),
    1: .same(proto: "NONE_STATUS"),
    2: .same(proto: "ACCEPTED"),
    3: .same(proto: "DECLINED"),
    4: .same(proto: "INVITED"),
    5: .same(proto: "TENTATIVE"),
  ]
}

extension Aae_Calendarsync_Attendee.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TYPE"),
    1: .same(proto: "NONE_TYPE"),
    2: .same(proto: "OPTIONAL"),
    3: .same(proto: "REQUIRED"),
    4: .same(proto: "RESOURCE"),
  ]
}

extension Aae_Calendarsync_Timestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Timestamp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.seconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularInt64Field(value: self.seconds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_Timestamp, rhs: Aae_Calendarsync_Timestamp) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aae_Calendarsync_TimeZone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeZone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "seconds_from_gmt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.secondsFromGmt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.secondsFromGmt != 0 {
      try visitor.visitSingularInt64Field(value: self.secondsFromGmt, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Aae_Calendarsync_TimeZone, rhs: Aae_Calendarsync_TimeZone) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.secondsFromGmt != rhs.secondsFromGmt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
